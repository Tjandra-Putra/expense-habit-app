@page "/budget-goal"
@page "/budget-goal/{id}"


@attribute [Authorize]

@using FinMarketApp.Shared
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.BarChart

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@if (Id == null)
{
    <h1>
        No such budget goal found.
    </h1>
}


<PageTitle>Fin Market (Budget Tracker)</PageTitle>

<link href="css/budgetTracker.css" rel="stylesheet" />

<NavMenu />


<main>
    <div class="container">
        <div class="d-flex flex-row justify-content-between">
            <div class="title">@budgetGoal?.Name</div>
            <button class="btn btn-primary btn-budget"
                    type="button"
                    data-bs-toggle="modal"
                    data-bs-target="#createExpensesModal">
                Add Expenses
            </button>

            <!-- Modal -->
            <div class="modal fade"
                 id="createExpensesModal"
                 tabindex="-1"
                 aria-labelledby="createExpensesModal"
                 aria-hidden="true">
                <div class="modal-dialog">
                    <form action="">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h1 class="modal-title fs-5" id="exampleModalLabel">
                                    Create Expense
                                </h1>
                                <button type="button"
                                        class="btn-close"
                                        data-bs-dismiss="modal"
                                        aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <div class="row">
                                        <div class="col">
                                            <label class="form-label">Name</label>
                                            <input type="text"
                                                   class="form-control"
                                                   name="name"
                                                   @bind="newExpense.Name"
                                                   required />
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <div class="row">
                                        <div class="col">
                                            <label class="form-label">Category</label>
                                            <select class="form-select"
                                                    aria-label="Default select example"
                                                    name="category"
                                                    @bind="newExpense.Category"
                                                    required>
                                                <option>Select Category</option>
                                                @if (categories != null && categories.Any())
                                                {
                                                    @foreach (var category in categories)
                                                    {
                                                        <option value="@category.Name">@category.Name</option>
                                                    }
                                                }
                                           
                                            </select>
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <div class="row">
                                        <div class="col">
                                            <label class="form-label">Amount</label>
                                            <input type="number"
                                                   step="0.01"
                                                   class="form-control"
                                                   name="amount"
                                                   placeholder="$0.00"
                                                    @bind="newExpense.Amount"
                                                   required />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button"
                                        class="btn btn-outline-dark"
                                        data-bs-dismiss="modal">
                                    Close
                                </button>
                                <button type="submit" class="btn btn-primary btn-budget" @onclick="() => CreateExpense()">
                                    Save changes
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-title">Budget Goal</div>
                    <div class="figure">$@budgetGoal?.Target</div>
                </div>
            </div>
            <div class="col">
                <div class="card">
                    <div class="card-title">Balance</div>
                    <div class="figure">$@(budgetGoal?.Target - TotalExpenses)</div>
                </div>
            </div>
            <div class="col">
                <div class="card">
                    <div class="card-title">Status</div>
                    <div class="figure">
                        @if (TotalExpenses < budgetGoal?.Target)
                        {
                            <span class="badge bg-success">On Track</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Over Budget</span>
                        }
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card">
                    <div class="card-title">Total Expenses</div>
                    <div class="figure">$@TotalExpenses</div>
                </div>
            </div>
        </div>

        <div class="section-title">Recent transactions</div>
        <div class="card">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col">Category</th>
                        <th scope="col">Name</th>
                        <th scope="col">Amount</th>
                        <th scope="col">Date</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (expenses != null && expenses.Any())
                    {
                        @foreach (var expense in expenses)
                        {
                            <tr>
                               <td>
                                    @expense.ExpenseId
                               </td>
                                <td>
                                    @expense.Category
                                </td>
                                <td>
                                    @expense.Name
                                </td>
                                <td>
                                    $@expense.Amount
                                </td>
                                <td>
                                    @expense.Date
                                </td>
                                <td>
                                    <button class="btn btn-light btn-action" type="button" data-bs-toggle="modal"
                                            data-bs-target="#updateExpenseModal">
                                        <i class="fa-regular fa-pen-to-square"></i>
                                    </button>

                                    <!-- Modal -->
                                    <div class="modal fade"
                                         id="updateExpenseModal"
                                         tabindex="-1"
                                         aria-labelledby="updateExpenseModal"
                                         aria-hidden="true">
                                        <div class="modal-dialog">
                                            <form action="">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h1 class="modal-title fs-5" id="updateExpenseModal">
                                                            Update Expense
                                                        </h1>
                                                        <button type="button"
                                                                class="btn-close"
                                                                data-bs-dismiss="modal"
                                                                aria-label="Close"></button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <div class="mb-3">
                                                            <div class="row">
                                                                <div class="col">
                                                                    <label class="form-label">Name</label>
                                                                    <input type="text"
                                                                           class="form-control"
                                                                           name="name"
                                                                           @bind="updateExpense.Name"
                                                                            />
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="mb-3">
                                                            <div class="row">
                                                                <div class="row">
                                                                    <div class="col">
                                                                        <label class="form-label">Category</label>
                                                                        <select class="form-select"
                                                                                aria-label="Default select example"
                                                                                name="category"
                                                                                @bind="updateExpense.Category"
                                                                                >
                                                                            <option>Select Category</option>
                                                                            @if (categories != null && categories.Any())
                                                                            {
                                                                                @foreach (var category in categories)
                                                                                {

                                                                                    @if (category.Name == expense.Category)
                                                                                    {
                                                                                        <option value="@category.Name" selected>@category.Name</option>
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        <option value="@category.Name">@category.Name</option>
                                                                                    }
                                                                                }
                                                                            }
                                                                        </select>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="mb-3">
                                                            <div class="row">
                                                                <div class="col">
                                                                    <label class="form-label">Amount</label>
                                                                    <input type="number"
                                                                           step="0.01"
                                                                           class="form-control"
                                                                           name="amount"
                                                                           @bind="updateExpense.Amount"
                                                                            />
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="mb-3">
                                                            <small class="text-muted">
                                                                Leave the fields empty if you do not want to update them.
                                                            </small>
                                                        </div>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="button"
                                                                class="btn btn-outline-dark"
                                                                data-bs-dismiss="modal">
                                                            Close
                                                        </button>
                                                        <button type="submit" class="btn btn-primary btn-budget" @onclick="() => UpdateExpense(expense.ExpenseId)">
                                                            Save changes
                                                        </button>
                                                    </div>
                                                </div>
                                            </form>
                                        </div>
                                    </div>

                                    <button class="btn btn-light btn-action" type="button" @onclick="() => DeleteExpense(expense.ExpenseId)">
                                        <i class="fa-regular fa-trash-can"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="card">
           <div class="row">
               <div class="col-md-6">
                   @* Bar chart goes here *@
                    @{
                        try
                        {
                            if (expenses != null && expenses.Any())
                            {
                                <Chart Config="_barConfig" Width="400" Height="200"></Chart>
                            }
                            else
                            {
                                <p>No expenses data available.</p>
                            }
                        }
                        catch (Exception ex)
                        {
                            <p>An error occurred while rendering the chart. Details: @ex.Message</p>
                            // Log or handle the exception as needed
                        }
                    }
               </div>
               <div class="col-md-6">
                    @{
                        try
                        {
                            if (expenses != null && expenses.Any())
                            {
                                <Chart Config="_pieConfig" Width="200"></Chart>
                            }
                            else
                            {
                                <p>No expenses data available.</p>
                            }
                        }
                        catch (Exception ex)
                        {
                            <p>An error occurred while rendering the chart. Details: @ex.Message</p>
                            // Log or handle the exception as needed
                        }
                    }
               </div>
           </div>
        </div>

        <div class="card">
           <div class="row mb-4">
               <div class="col">
                    @if (expenses != null && expenses.Any())
                    {
                        <Chart Config="_lineConfig" Width="400" Height="200"></Chart>
                    }
                    else
                    {
                        <p>No expenses data available.</p>
                    }
               </div>
           </div>
        </div>
    </div>
</main>

@code{
    [Parameter]
    public string Id { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }


    BudgetGoal budgetGoal;
    List<Expense> expenses;
    List<Category> categories;
    double TotalExpenses = 0;
    double balance = 0;

    private Expense newExpense = new Expense();

    // ============ [START] Chart Portion ============
    private PieConfig _pieConfig;
    private BarConfig _barConfig;
    private LineConfig _lineConfig;  // Add LineConfig
    // ============ [END] Chart Portion ============



    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity;
        if (user != null && user.IsAuthenticated)
        {
            try
            {
                // ==== Get Budget By ID ====
                budgetGoal = await Http.GetFromJsonAsync<BudgetGoal>($"api/budgetgoal/{Id}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR: {ex.Message}");
            }
        }

        // Get expenses by goalId
        if (user != null && user.IsAuthenticated)
        {
            try
            {
                // ==== Get Expenses By Goal ID ====
                expenses = await Http.GetFromJsonAsync<List<Expense>>($"api/expense/{Id}");

                Console.WriteLine("============== EXPENSE INIT ==============");

                Console.WriteLine($"Expenses: {expenses}");
            }
            catch(Exception ex)
            {
                Console.WriteLine($"ERROR: {ex.Message}");
            }
        }

        // Get categories
        if (user != null && user.IsAuthenticated)
            Console.WriteLine("============== CATEGORY INIT ==============");
        {       
            try
            {
                // ==== Get Categories ====
                categories = await Http.GetFromJsonAsync<List<Category>>($"api/category");

                if (categories != null && categories.Any())
                {
                    foreach (var category in categories)
                    {
                        Console.WriteLine($"Category: {category.Name}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR: {ex.Message}");
            }
        }

        // Calculate total expenses amount
        if (expenses != null && expenses.Any())
        {
            foreach (var expense in expenses)
            {
                TotalExpenses += expense.Amount;
            }

            //balance = budgetGoal.Target - TotalExpenses;
        }

        // ============ [START] Chart Portion ============
        ConfigurePieConfig();
        ConfigureBarConfig();
        ConfigureLineConfig();
        // ============ [END] Chart Portion ============
    }

    // Create expense
    private async Task CreateExpense()
    {
        // check if category is selected empty, do alert
        if (newExpense.Category == "")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Category must not be empty");
            return;
        }

        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity;
        if (user != null && user.IsAuthenticated)
        {
            try
            {
                // ==== Create Expense ====
                newExpense.GoalId = int.Parse(Id);

                var response = await Http.PostAsJsonAsync($"api/expense/", newExpense);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Expense created successfully!");
                }
                else
                {
                    Console.WriteLine("Expense creation failed!");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR: {ex.Message}");
            }
        }
    }

    // Delete expense
    private async Task DeleteExpense(int id)
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity;
        if (user != null && user.IsAuthenticated)
        {
            try
            {
                // ==== Delete Expense ====
                var response = await Http.DeleteAsync($"api/expense/{id}");

                if (response.IsSuccessStatusCode)
                {
                    // Refresh page
                    NavigationManager.NavigateTo($"/budget-goal/{Id}", true);
                    Console.WriteLine("Expense deleted successfully!");
                }
                else
                {
                    Console.WriteLine("Expense deletion failed!");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR: {ex.Message}");
            }
        }
    }

    // Update expense
    Expense updateExpense = new Expense();

    private async Task UpdateExpense(int expenseId)
    {

        Console.WriteLine($"Expense Category update ===>: {updateExpense.Category}");

        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity;
        if (user != null && user.IsAuthenticated)
        {
            try
            {
                // ==== Update Expense ====
                var response = await Http.PutAsJsonAsync($"api/expense/{expenseId}", updateExpense);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Expense updated successfully!");
                }
                else
                {
                    Console.WriteLine("Expense update failed!");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR: {ex.Message}");
            }
        }
    }

    // ============ [START] Chart Portion ============
    protected void ConfigurePieConfig()
    {
        if (expenses != null && expenses.Any())
        {
            _pieConfig = new PieConfig
                {
                    Options = new PieOptions
                    {
                        Responsive = true,
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "Expenses by Category"
                        }
                    }
                };

            // get expenses by category
            var expensesByCategory = expenses.GroupBy(x => x.Category)
                .Select(y => new { Category = y.Key, Amount = y.Sum(z => z.Amount) })
                .ToList();

            // Create labels and data based on expensesByCategory
            foreach (var expense in expensesByCategory)
            {
                _pieConfig.Data.Labels.Add(expense.Category);
                Console.WriteLine($"Expense Category ===>: {expense.Category}");
            }

            PieDataset<double> dataset = new PieDataset<double>()
                {
                    BackgroundColor = new[]
                    {
                ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
                ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
                ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
            }
                };

            foreach (var expense in expensesByCategory)
            {
                // add expense amount to dataset
                dataset.Add(expense.Amount);
                Console.WriteLine($"Expense Amount ===>: {expense.Amount}");
            }

            _pieConfig.Data.Datasets.Add(dataset);
        }
        else
        {
            // Handle the case where expenses is null or empty
            // You might want to set _pieConfig to a default state or display a message.
            _pieConfig = new PieConfig
                {
                    Options = new PieOptions
                    {
                        Responsive = true,
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "No Expenses Available"
                        }
                    }
                };
        }
    }

    protected void ConfigureBarConfig()
    {
        Console.Write("===================================== ConfigureBarConfig =================================");
        if (expenses != null && expenses.Any())
        {
            _barConfig = new BarConfig
                {
                    Options = new BarOptions
                    {
                        Responsive = true,
                        Legend = new Legend
                        {
                            Position = Position.Top
                        },
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "Expenses by Category"
                        }
                    }
                };
            // get expenses by category
            var expensesByCategory = expenses
                .Where(x => !string.IsNullOrEmpty(x.Category))  // Exclude items with null or empty categories
                .GroupBy(x => x.Category)
                .Select(y => new { Category = y.Key, Amount = y.Sum(z => z.Amount) })
                .ToList();

            // Create labels and data based on expensesByCategory
            foreach (var expense in expensesByCategory)
            {
                _barConfig.Data.Labels.Add(expense?.Category);
                Console.WriteLine($"Expense Category ===>: {expense.Category}");
            }

            BarDataset<double> dataset = new BarDataset<double>()
                {
                    Label = "Category Expenses",
                    BackgroundColor = new[]
                    {
                ColorUtil.ColorHexString(255, 99, 132), // Bar 1 aka "Red"
                ColorUtil.ColorHexString(255, 205, 86), // Bar 2 aka "Yellow"
                ColorUtil.ColorHexString(75, 192, 192), // Bar 3 aka "Green"
                ColorUtil.ColorHexString(54, 162, 235), // Bar 4 aka "Blue"
                    }
                };

            foreach (var expense in expensesByCategory)
            {
                // add expense amount to dataset
                dataset.Add(expense.Amount);
                Console.WriteLine($"Expense Amount ===>: {expense.Amount}");
            }

            _barConfig.Data.Datasets.Add(dataset);
        }
        else
        {
            // Handle the case where expenses is null or empty
            // You might want to set _barConfig to a default state or display a message.
            _barConfig = new BarConfig
                {
                    Options = new BarOptions
                    {
                        Responsive = true,
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "No Expenses Available"
                        }
                    }
                };
        }
    }


    protected void ConfigureLineConfig()
    {
        if (expenses != null && expenses.Any())
        {
            _lineConfig = new LineConfig
                {
                    Options = new LineOptions
                    {
                        Responsive = true,
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "Cumulative Expenses Over Time"
                        }
                    }
                };

            // Assuming expenses have a property named Date
            var expensesOverTime = expenses.OrderBy(e => e.Date)
                .Select(e => new CumulativeExpenseData { Date = e.Date, CumulativeAmount = 0 })
                .ToList();

            double cumulativeAmount = 0;

            foreach (var expense in expensesOverTime)
            {
                cumulativeAmount += expenses.First(e => e.Date == expense.Date).Amount;
                expense.CumulativeAmount = cumulativeAmount;
            }

            foreach (var expense in expensesOverTime)
            {
                _lineConfig.Data.Labels.Add(expense.Date.ToString("yyyy-MM-dd")); // Adjust the date format as needed
            }

            LineDataset<double> expensesDataset = new LineDataset<double>()
                {
                    Label = "Expenses",
                    BackgroundColor = ColorUtil.ColorHexString(75, 192, 192),
                    BorderColor = ColorUtil.ColorHexString(75, 192, 192),
                    Fill = false
                };

            foreach (var expense in expensesOverTime)
            {
                expensesDataset.Add(expense.CumulativeAmount);
            }

            _lineConfig.Data.Datasets.Add(expensesDataset);

            // Add a line for the target amount
            LineDataset<double> targetDataset = new LineDataset<double>()
                {
                    Label = "Target",
                    BackgroundColor = ColorUtil.ColorHexString(255, 99, 132),
                    BorderColor = ColorUtil.ColorHexString(255, 99, 132),
                    Fill = false,
                    BorderDash = new[] { 5, 5 } // Optional: Add dashed line style
                };

            // Repeat the target amount for each date
            foreach (var expense in expensesOverTime)
            {
                targetDataset.Add(budgetGoal?.Target ?? 0); // Assuming budgetGoal is available
            }

            _lineConfig.Data.Datasets.Add(targetDataset);
        }
        else
        {
            _lineConfig = new LineConfig
                {
                    Options = new LineOptions
                    {
                        Responsive = true,
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "No Expenses Available"
                        }
                    }
                };
        }
    }

    public class CumulativeExpenseData
    {
        public DateTime Date { get; set; }
        public double CumulativeAmount { get; set; }
    }


}